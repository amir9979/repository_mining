<?xml version="1.0"?>
<!--
 !_____________________________________________________________________________
 !
 !   All CheckStyle checks, with defaults explicitly stated.
 !
 !   Can be used as a starting point for custom rule sets.
 !_____________________________________________________________________________
 !-->
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
          "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<module name="Checker">

    <!--
     !________________________________________________________________________________________
     !
     !     R E G E X P
     !________________________________________________________________________________________
     !-->
    <!-- A check for detecting that matches across multiple lines. Works with any file type. !-->
    <!-- See http://checkstyle.sourceforge.net/config_regexp.html#RegexpMultiline !-->
    <!-- Default: OFF
    <module name="RegexpMultiline">
        <property name="format"         value=""/>
        <property name="message"        value=""/>
        <property name="ignoreCase"     value="false"/>
        <property name="minimum"        value="0"/>
        <property name="maximum"        value="0"/>
        <property name="fileExtensions" value=""/>
    </module>
    !-->

    <!-- A check for detecting single lines that match a supplied regular expression. Works with any file type. !-->
    <!-- See http://checkstyle.sourceforge.net/config_regexp.html#RegexpSingleline !-->
    <!-- Default: OFF
    <module name="RegexpSingleline">
        <property name="format"         value=""/>
        <property name="message"        value=""/>
        <property name="ignoreCase"     value="false"/>
        <property name="minimum"        value="0"/>
        <property name="maximum"        value="0"/>
        <property name="fileExtensions" value=""/>
    </module>
    !-->

    <!--
     !________________________________________________________________________________________
     !
     !     M I S C E L L A N E O U S
     !________________________________________________________________________________________
     !-->
    <!-- Checks whether files end with a new line.                        !-->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile !-->
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator"  value="system"/>
        <property name="fileExtensions" value="*.*"/>
    </module>

    <!-- Checks that property files contain the same keys.         !-->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation !-->
    <module name="Translation">
        <property name="fileExtensions" value="properties"/>
    </module>


    <!--
     !________________________________________________________________________________________
     !
     !     S I Z E   V I O L A T I O N S
     !________________________________________________________________________________________
     !-->
    <!-- Checks for long source files. !-->
    <!-- See http://checkstyle.sf.net/config_sizes.html !-->
    <module name="FileLength">
        <property name="max"            value="0"/>
        <property name="fileExtensions" value=""/>
    </module>


    <!--
     !________________________________________________________________________________________
     !
     !     W H I T E S P A C E
     !________________________________________________________________________________________
     !-->
    <!-- Checks that there are no tab characters ('\t') in the source code. !-->
    <!-- See http://checkstyle.sourceforge.net/config_whitespace.html#FileTabCharacter !-->


    <module name="TreeWalker">

        <!--
         !________________________________________________________________________________________
         !
         !     A N N O T A T I O N S
         !________________________________________________________________________________________
         !-->
        <!-- This check controls the usage style of annotations. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#AnnotationUseStyle !-->

        <!-- Verifies that both the java.lang.Deprecated import is present and the @deprecated Javadoc tag is present when either is present. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#MissingDeprecated !-->

        <!-- Verifies that the java.lang.Override annotation is present when the {@inheritDoc} javadoc tag is present. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#MissingOverride !-->
        <!-- Default: OFF
        <module name="MissingOverride">
            <property name="javaFiveCompatibility" value="false"/>
        </module>
        !-->

        <!-- This check makes sure that all package annotations are in the package-info.java file. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#PackageAnnotation !-->
        <module name="PackageAnnotation"/>

        <!-- This check allows you to specify what warnings that SuppressWarnings is not allowed to suppress. !-->
        <!-- You can also specify a list of TokenTypes that the configured warning(s) cannot be suppressed on. !-->
        <!-- See http://checkstyle.sourceforge.net/config_annotation.html#SuppressWarnings !-->
        <module name="SuppressWarnings">
            <property name="format" value="^$|^\s+$"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF,
                                           ANNOTATION_FIELD_DEF, ENUM_CONSTANT_DEF, PARAMETER_DEF,
                                           VARIABLE_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>


        <!--
         !________________________________________________________________________________________
         !
         !     B L O C K S
         !________________________________________________________________________________________
         !-->
        <!-- Finds nested blocks, i.e. blocks that are used freely in the code. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->

        <!-- Checks for empty blocks. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->

        <!-- Checks for the placement of left curly braces ('{') for code blocks. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->

        <!-- Checks for braces around code blocks. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->

        <!-- Checks the placement of right curly braces ('}') for else, try, and catch tokens. !-->
        <!-- See http://checkstyle.sf.net/config_blocks.html !-->


        <!--
         !________________________________________________________________________________________
         !
         !     C L A S S   D E S I G N
         !________________________________________________________________________________________
         !-->
        <!-- Checks that classes are designed for extension. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <!-- Default: OFF
        <module name="DesignForExtension"/>
        !-->

        <!-- Checks that a class which has only private constructors is declared as final. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->

        <!-- Make sure that utility classes (classes that contain only static methods) do not have a public constructor. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->

        <!-- Check nested (internal) classes/interfaces are declared at the bottom of the class after all method and field declarations. !-->
        <!-- See http://checkstyle.sourceforge.net/config_design.html#InnerTypeLast !-->

        <!-- Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="InterfaceIsType">
            <property name="allowMarkerInterfaces" value="true"/>
        </module>

        <!-- Ensures that exceptions (defined as any class name conforming to some regular expression) are immutable. !-->
        <!-- That is, have only final fields. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->

        <!-- Restricts throws statements to a specified count. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->
        <module name="ThrowsCount">
            <property name="max" value="0"/>
        </module>

        <!-- Checks visibility of class members. !-->
        <!-- See http://checkstyle.sf.net/config_design.html !-->


        <!--
         !________________________________________________________________________________________
         !
         !     C O D I N G
         !________________________________________________________________________________________
         !-->
        <module name="NestedForDepth">
            <property name="max" value="0"/>
        </module>

        <!-- Restricts nested if-else blocks to a specified depth. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="NestedIfDepth">
            <property name="max" value="0"/>
        </module>

        <!-- Restricts nested try-catch blocks to a specified depth. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="NestedTryDepth">
            <property name="max" value="0"/>
        </module>

        <!-- Checks that the clone method is not overridden from the Object class. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#NoClone !-->

        <!-- Verifies there are no finalize() methods defined in a class. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#NoFinalizer !-->

        <!-- Checks there is only one statement per line. !-->
        <!-- See http://checkstyle.sourceforge.net/config_coding.html#OneStatementPerLine !-->

        <!-- Ensure a class has a package declaration. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->

        <!-- Disallow assignment of parameters. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->

        <!-- Checks for redundant exceptions declared in throws clause such as duplicates, !-->
        <!-- unchecked exceptions or subclasses of another declared exception. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->

        <!-- Checks that code doesn't rely on the "this." default. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="RequireThis">
            <property name="checkFields"  value="true"/>
            <property name="checkMethods" value="true"/>
        </module>

        <!-- Restrict the number of return statements. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="ReturnCount">
            <property name="max"    value="0"/>
            <property name="format" value=""/>
        </module>

        <!-- Checks for overly complicated boolean expressions. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->

        <!-- Checks for overly complicated boolean return statements. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->

        <!-- Checks that string literals are not used with == or !=. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
	
        <!-- Checks that an overriding clone() method invokes super.clone(). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->

        <!-- Checks that an overriding finalize() method invokes super.finalize(). !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->
        <module name="SuperFinalize"/>

        <!-- Checks for the use of unnecessary parentheses. !-->
        <!-- See http://checkstyle.sf.net/config_coding.html !-->



        <!--
         !________________________________________________________________________________________
         !
         !     J A V A D O C S
         !________________________________________________________________________________________
         !-->
        <!-- Checks to ensure that the javadoc tags exist (if required) !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocMethod !-->

        <!-- Validates Javadoc comments to help ensure they are well formed. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocStyle !-->

        <!-- Checks Javadoc comments for class and interface definitions. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocType !-->

        <!-- Checks that variables have Javadoc comments. !-->
        <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocVariable !-->

        <!-- Outputs a JavaDoc tag as information. !-->
        <!-- See http://checkstyle.sourceforge.net/config_javadoc.html#WriteTag !-->


        <!--
         !________________________________________________________________________________________
         !
         !     M E T R I C S
         !________________________________________________________________________________________
         !-->
        <!-- Restrict the number of number of &&, || and ^ in an expression. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="BooleanExpressionComplexity">
            <property name="max"    value="0"/>
            <property name="tokens" value="LAND, BAND, LOR, BOR, BXOR"/>
        </module>

        <!-- This metric measures the number of instantiations of other classes within the given class. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="ClassDataAbstractionCoupling">
            <property name="max" value="0"/>
        </module>

        <!-- The number of other classes a given class relies on. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="ClassFanOutComplexity">
            <property name="max" value="0"/>
        </module>

        <!-- Checks cyclomatic complexity against a specified limit. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="CyclomaticComplexity">
            <property name="max" value="0"/>
        </module>

        <!-- Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). !-->
        <!-- See http://checkstyle.sourceforge.net/config_metrics.html#JavaNCSS !-->
        <module name="JavaNCSS">
            <property name="methodMaximum" value="0"/>
            <property name="classMaximum"  value="0"/>
            <property name="fileMaximum"   value="0"/>
        </module>

        <!-- The NPATH metric computes the number of possible execution paths through a function. !-->
        <!-- See http://checkstyle.sf.net/config_metrics.html !-->
        <module name="NPathComplexity">
            <property name="max" value="0"/>
        </module>


        <!--
         !________________________________________________________________________________________
         !
         !     M I S C E L L A N E O U S
         !________________________________________________________________________________________
         !-->
        <!-- Checks the style of array type definitions. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->

        <!-- Checks for restricted tokens beneath other tokens. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->
        <!-- Default: OFF
        <module name="DescendantToken">
            <property name="tokens"         value=""/>
            <property name="limitedTokens"  value=""/>
            <property name="minimumDepth"   value="0"/>
            <property name="maximumDepth"   value="java.lang.Integer.MAX_VALUE"/>
            <property name="minimumNumber"  value="0"/>
            <property name="maximumNumber"  value="java.lang.Integer.MAX_VALUE"/>
            <property name="sumTokenCounts" value="false"/>
            <property name="minimumMessage" value="descendant.token.min"/>
            <property name="maximumMessage" value="descendant.token.max"/>
        </module>
        !-->

        <!-- Check that method/constructor parameters are final. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->

        <!-- A generic check for code problems - the user can search for any pattern. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->
        <!-- Default: OFF
        <module name="GenericIllegalRegexp">
            <property name="format"         value="\S\s+$"/>
            <property name="message"        value="Line has trailing spaces."/>
            <property name="ignoreCase"     value="false"/>
            <property name="ignoreComments" value="false"/>
        </module>
        !-->

        <!-- Checks correct indentation of Java Code. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->

        <!-- Checks that the outer type name and the file name match. !-->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#OuterTypeFilename !-->
        <module name="OuterTypeFilename"/>

        <!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->

        <!-- The check to ensure that requires that comments be the only thing on a line. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->

        <!-- Checks for uncommented main() methods (debugging leftovers). !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->

        <!-- Checks that long constants are defined with an upper ell. That is 'L' and not 'l'. !-->
        <!-- See http://checkstyle.sf.net/config_misc.html !-->


        <!--
         !________________________________________________________________________________________
         !
         !     M O D I F I E R S
         !________________________________________________________________________________________
         !-->
        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, !-->
        <!-- sections 8.1.1, 8.3.1 and 8.4.3. !-->
        <!-- See http://checkstyle.sf.net/config_modifiers.html !-->

        <!-- Checks that there are no redundant modifiers. !-->
        <!-- See http://checkstyle.sf.net/config_modifiers.html !-->



        <!-- Checks for member variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->

        <!-- Checks for method name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->

        <!-- Checks for method type parameter name naming conventions. !-->
        <!-- See http://checkstyle.sourceforge.net/config_naming.html#MethodTypeParameterName !-->

        <!-- Checks for package name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->
        <!-- Checks for parameter name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->

        <!-- Checks for static variable name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->

        <!-- Checks for type name naming conventions. !-->
        <!-- See http://checkstyle.sf.net/config_naming.html !-->


        <!--
         !________________________________________________________________________________________
         !
         !     R E G E X P
         !________________________________________________________________________________________
         !-->
        <!-- A check that makes sure that a specified pattern exists, exists less than a set number of times, !-->
        <!-- or does not exist in the file. !-->
        <!-- See http://checkstyle.sourceforge.net/config_misc.html#Regexp !-->
        <!-- Default: OFF
        <module name="Regexp">
            <property name="format"         value=""/>
            <property name="message"        value=""/>
            <property name="illegalPattern" value="false"/>
            <property name="duplicateLimit" value="-1"/>
            <property name="errorLimit"     value="100"/>
            <property name="ignoreComments" value="false"/>
        </module>
        !-->

        <!-- This class is variation on RegexpSingleline for detecting single lines that match a !-->
        <!-- supplied regular expression in Java files. It supports suppressing matches in Java comments. !-->
        <!-- See http://checkstyle.sourceforge.net/config_regexp.html#RegexpSinglelineJava !-->
        <!-- Default: OFF
        <module name="RegexpSinglelineJava">
            <property name="format"         value=""/>
            <property name="message"        value=""/>
            <property name="ignoreCase"     value="false"/>
            <property name="minimum"        value="0"/>
            <property name="maximum"        value="0"/>
            <property name="ignoreComments" value="false"/>
        </module>
        !-->

        <!--
         !________________________________________________________________________________________
         !
         !     S I Z E   V I O L A T I O N S
         !________________________________________________________________________________________
         !-->
        <!-- Checks for long anonymous inner classes. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <module name="AnonInnerLength">
            <property name="max" value="0"/>
        </module>

        <!-- Restricts the number of executable statements to a specified limit. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <module name="ExecutableStatementCount">
            <property name="max"    value="0"/>
            <property name="tokens" value="CTOR_DEF, METHOD_DEF, INSTANCE_INIT, STATIC_INIT"/>
        </module>

        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <!-- Checks for long lines. !-->

        <!-- Checks the number of methods declared in each type. This includes the number of each scope !-->
        <!-- (private, package, protected and public) as well as an overall total. !-->
        <!-- See http://checkstyle.sourceforge.net/config_sizes.html#MethodCount !-->
        <module name="MethodCount">
            <property name="maxTotal"     value="0"/>
            <property name="maxPrivate"   value="0"/>
            <property name="maxPackage"   value="0"/>
            <property name="maxProtected" value="0"/>
            <property name="maxPublic"    value="0"/>
        </module>

        <!-- Checks for long methods and constructors. !-->
        <!-- See http://checkstyle.sf.net/config_sizes.html !-->
        <module name="MethodLength">
            <property name="max"        value="0"/>
            <property name="countEmpty" value="true"/>
            <property name="tokens"     value="METHOD_DEF, CTOR_DEF"/>
        </module>

        <!--
         !________________________________________________________________________________________
         !
         !     W H I T E S P A C E
         !________________________________________________________________________________________
         !-->
        <!-- Checks the padding of an empty for initializer. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks the padding of an empty for iterator. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks that the whitespace around the Generic tokens < and > is correct to the typical convention. !-->
        <!-- See http://checkstyle.sourceforge.net/config_whitespace.html#GenericWhitespace !-->

        <!-- Checks the padding between the identifier of a method definition, !-->
        <!-- constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks that there is no whitespace after a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks that there is no whitespace before a token. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks the policy on how to wrap lines on operators. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks the policy on the padding of parentheses. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks the policy on the padding of parentheses for typecasts. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->
        <module name="TypecastParenPad">
            <property name="option" value="nospace"/>
            <property name="tokens" value="TYPECAST"/>
        </module>

        <!-- Checks that a token is followed by whitespace. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

        <!-- Checks that a token is surrounded by whitespace. !-->
        <!-- See http://checkstyle.sf.net/config_whitespace.html !-->

    </module>

</module>
